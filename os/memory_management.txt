 üß† Memory Management in Operating Systems

 üîç What is Memory Management?

Memory Management is a core function of the OS responsible for:
* Allocating memory to processes
* Tracking usage of memory
* Freeing memory when it‚Äôs no longer needed
* Protecting memory between processes
It ensures efficient use of the main memory (RAM) and provides an abstraction of memory to each process so it feels like it has a large, continuous block of memory.



 üß© Why is Memory Management Important?
Realtime constraints:
* Limited physical memory (RAM)
* Many programs run simultaneously (multitasking)
* Processes should not overwrite each other‚Äôs memory (isolation)
* Need for fast access





 üßë‚Äçüíª RealTime Example
 Example: Running Multiple Applications on Your Laptop
Suppose you're:
              * Editing a Word document
              * Browsing Chrome with 10 tabs
              * Listening to music on Spotify
Your OS (say Windows or Linux):
      1. Allocates memory blocks to Word, Chrome, and Spotify.
      2. When Chrome opens a new tab, memory is dynamically allocated to that tab.
      3. If you close Spotify, the OS reclaims (deallocates) its memory.
      4. If Word tries to use Chrome‚Äôs memory, the OS blocks it to prevent crashes.
      


 üß± Types of Memory in OS
1. Primary Memory (RAM): Fast and volatile. Directly used by CPU.
2. Secondary Memory (Disk): Slower and persistent. Used for swap or paging.
3. Cache Memory: Faster memory between CPU and RAM.
4. Virtual Memory: Logical abstraction that makes it seem like the process has more memory than physically available.

 üß† Types of Memory Management Techniques
 Type                                 Description                                              Example                                                             
 1. Single Contiguous Allocation  Entire memory is given to one process at a time.         Early DOS systems.                                              
 2. Fixed Partitioning            Memory divided into fixed sizes.                         OS divides RAM into 3 blocks: 100MB, 200MB, 300MB.              
 3. Dynamic Partitioning          Memory allocated as per process size.                    Chrome gets 150MB, Word 80MB.                                   
 4. Paging                        Memory is split into fixedsize pages.                   A 2GB program is broken into 4KB pages.                         
 5. Segmentation                  Memory divided by logical segments (code, data, stack).  Helps in modular program execution.                             
 6. Virtual Memory                Uses disk as an extension of RAM.                        When RAM is full, inactive parts of memory are swapped to disk. 
 7. Demand Paging                 Loads memory pages into RAM only when needed.            Increases efficiency; saves RAM.                                
 8. Swapping                      Entire processes swapped in and out of RAM and disk.     Helps run more processes than RAM can hold.                     



 üîÑ Core Operations in Memory Management

 Operation                              Explanation                                              RealWorld Example                                                        
 1. Allocation                      Assigning memory to processes.                           Chrome is given 200MB RAM on launch.                                
 2. Deallocation                    Releasing memory from finished or killed processes.      Closing VLC frees its 100MB memory.                                 
 3. Protection                      Preventing one process from accessing another‚Äôs memory.  If Firefox tries to access Excel‚Äôs memory, it‚Äôs denied.             
 4. Address Translation             Convert logical to physical addresses.                   Memory Address `0xA000` in code might point to RAM address `0x3A45` 
 5. Compaction                      Rearranging memory to avoid fragmentation.               Moving small unused gaps together into one large block.             
 6. Paging/Segmentation Management  Handling how memory is paged or segmented.               Loading pages or segments as needed.                                
 7. Swapping                        Moving data between RAM and disk.                        Photoshop swapped out when inactive.                                



 üîÇ Logical vs Physical Address

 Type                  Description                           
    
 Logical Address   Used by the process (virtual address) 
 Physical Address  Actual location in RAM                

üß† The Memory Management Unit (MMU) translates logical ‚Üí physical.



 üîß Memory Fragmentation
 Type                        Description                             Example                                    
 Internal Fragmentation  Wasted space inside allocated block.    100MB block given, process needs 80MB. 
 External Fragmentation  Wasted space between allocated blocks.  Many small unused spaces scattered.    

üìå Solution: Compaction or using paging.



 üîê Memory Protection Techniques

1. Base and Limit Registers ‚Äì Restrict access range
2. Segmentation + Paging
3. Virtual Memory Isolation
4. Access Control Bits ‚Äì Readonly, executeonly, etc.



 üó∫Ô∏è Memory Layout of a Process


++ < High Address
 Stack                < grows downward
  
 Heap                 < grows upward (for dynamic allocation)
  
 Data (global vars)  
  
 Code (Text segment) 
++ < Low Address




 üì¶ Virtual Memory  In Depth

Virtual Memory gives the illusion of a large continuous memory space by:

* Splitting memory into pages
* Keeping only active pages in RAM
* Swapping out inactive pages to swap space on disk

üîÅ Uses:

* Paging
* Demand Paging
* Page Replacement Algorithms (LRU, FIFO)



 üßÆ Page Replacement Algorithms

 Algorithm    Strategy                                 
    
 FIFO     Remove the oldest page                   
 LRU      Remove the least recently used page      
 Optimal  Replace page not needed for longest time 

 ‚úÖ Real World Summary

When you multitask:

* Your OS gives each app its own memory space
* Uses virtual memory to make RAM seem larger
* Swaps unused memory to disk if needed
* Protects memory to avoid crashes
* Ensures efficient performance by managing resources smartly
