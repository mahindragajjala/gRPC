Problems with traditional RPC

ðŸ”´ 1. Tight Coupling Between Client and Server
    Issue: The client and server must agree on the function signature, 
            data types, and protocol.
    Example: If the server changes the parameter list of a procedure, the 
             client must also be updated.
    Impact: Reduces flexibility and increases maintenance burden.

ðŸ”´ 2. Lack of Interoperability
    Issue: Traditional RPC frameworks (like Sun RPC) often support only specific 
            languages or platforms.
    Example: A Java client cannot easily talk to a C-based RPC server.
    Impact: Hard to build polyglot systems (multiple languages working together).

ðŸ”´ 3. Poor Error Handling and Transparency
    Issue: Traditional RPC abstracts away the network layer too much.
    Example: A network timeout may be seen as a function failure rather than a communication issue.
    Impact: Leads to confusing error messages and poor debugging capabilities.

ðŸ”´ 4. Scalability Problems
    Issue: RPC assumes a relatively static set of servers.
    Example: Scaling RPC services horizontally requires custom load balancing.
    Impact: Not cloud-native or elastic by design.

ðŸ”´ 5. Latency and Performance Overhead
   Issue: RPC over the network adds significant latency, but the abstraction hides it.
   Example: Developers may write code as if calling a local function, resulting in performance issues due to slow network calls.
   Impact: Leads to bad system design if developers donâ€™t account for network delays.

ðŸ”´ 6. Serialization/Deserialization Issues
    Issue: Many traditional RPC systems use verbose or inefficient serialization formats.
    Example: XDR (used by Sun RPC) is slower than modern alternatives like Protocol Buffers or Avro.
    Impact: Increases CPU usage and data transfer size.

ðŸ”´ 7. Firewall and NAT Traversal Problems
Issue: Traditional RPC uses custom ports or protocols, which are often blocked by firewalls.

Example: RPC over TCP port 111 (portmapper) might be blocked by a corporate firewall.

Impact: Makes it harder to deploy in modern internet environments.

ðŸ”´ 8. Lack of Built-in Security
Issue: Traditional RPC does not include encryption, authentication, or authorization mechanisms.

Example: Data may be sent in plaintext over the network.

Impact: Leads to insecure systems unless developers manually implement security layers.

ðŸ”´ 9. Difficult to Debug and Monitor
Issue: RPC abstracts away network calls, making it hard to trace failures across services.

Example: You donâ€™t get HTTP-style logs or metrics by default.

Impact: Makes observability harder in production systems.

ðŸ”´ 10. Versioning and Backward Compatibility
Issue: RPC interfaces are hard to version without breaking clients.

Example: Adding a new field to a procedure may break old clients.

Impact: Makes continuous delivery and microservice evolution difficult.

ðŸ”´ 11. Blocking by Default (Synchronous Communication)
Issue: Traditional RPC is typically blocking, requiring the client to wait for a response.

Example: A client waits even if the server is temporarily unavailable.

Impact: Reduces concurrency and responsiveness.

ðŸ”´ 12. Limited Support for Modern DevOps Practices
Issue: Traditional RPC lacks support for containerization, service discovery, retries, health checks, etc.

Example: No native Kubernetes or cloud integration.

Impact: Makes automation and deployment harder in microservice architectures.

ðŸ”´ 13. Hard to Use in Web-based Systems
Issue: RPC is not browser-friendly and cannot be directly invoked over HTTP.

Example: No native browser client support unless wrapped in HTTP.

Impact: Unsuitable for web apps or mobile apps without additional APIs.
