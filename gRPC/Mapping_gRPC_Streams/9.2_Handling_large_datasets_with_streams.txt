

 âœ… Why Stream Large Data Instead of Unary RPC?

Problem with Unary

Benefit of Streaming

Memory-heavy

Streams load piece-by-piece

gRPC message size limits

Easily bypassed with chunking

Slower initial response

First chunk can arrive immediately

No flow control

Stream can be throttled/paused

  

 ðŸ“¦ Real Example: File Chunk Streaming (Server-side streaming)

 .proto

    service FileService {
      rpc DownloadFile(FileRequest) returns (stream FileChunk);
    }
    
    message FileRequest {
      string filename = 1;
    }
    
    message FileChunk {
      bytes data = 1;
    }
    

  

 ðŸ§  Server-Side Go Implementation

    func (s FileServiceServer) DownloadFile(req pb.FileRequest, stream pb.FileServiceDownloadFileServer) error {
        file, err := os.Open(req.FileName)
        if err != nil {
            return err
        }
        defer file.Close()
    
        buf := make([]byte, 1024) // 1KB chunks
        for {
            n, err := file.Read(buf)
            if err == io.EOF {
                break
            }
            if err != nil {
                return err
            }
    
            stream.Send(&pb.FileChunk{Data: buf[:n]})
        }
        return nil
    }
    

  

 ðŸ‘‡ Client-Side (Stream Receiver)

    stream, err := client.DownloadFile(ctx, &pb.FileRequest{FileName: "big.pdf"})
    if err != nil {
        log.Fatal(err)
    }
    
    for {
        chunk, err := stream.Recv()
        if err == io.EOF {
            break
        }
        if err != nil {
            log.Fatal(err)
        }
    
        // Save chunk to disk, or process it
        output.Write(chunk.Data)
    }
    

  

 âœ… Tips for Large Stream Efficiency

   Use smaller chunks (e.g., 512B to 4KB)
   Add context.Context timeouts or deadlines
   Implement rate limiting or flow control if needed
   Avoid []byte reallocation â€“ reuse slices
   Track client disconnects (e.g., ctx.Done())

  

 ðŸ§ª ASCII: File Chunk Streaming (1KB at a time)

    Client                  Server
       |     FileRequest      |
       |--------------------->|
       |                      |
       |<--- FileChunk [0-1KB]|
       |<--- FileChunk [1-2KB]|
       |<--- FileChunk [2-3KB]|
       |        ...           |
       |<--- FileChunk [EOF]  |
