                  gRPC LEARNING INDEX 

1. ðŸ”¹ INTRODUCTION TO RPC
   â”œâ”€â”€ 1.1 What is RPC?
   â”œâ”€â”€ 1.2 How RPC works (Call flow & Architecture)
   â”œâ”€â”€ 1.3 RPC vs HTTP/REST
   â”œâ”€â”€ 1.4 Synchronous vs Asynchronous RPC
   â”œâ”€â”€ 1.5 Real-life use cases of RPC
   â””â”€â”€ 1.6 Problems with traditional RPC

2. ðŸ”¹ INTRODUCTION TO gRPC
   â”œâ”€â”€ 2.1 What is gRPC?
   â”œâ”€â”€ 2.2 Why use gRPC? (Advantages)
   â”œâ”€â”€ 2.3 gRPC Architecture (Flow diagram)
   â”œâ”€â”€ 2.4 Protocol Buffers (ProtoBuf) â€“ Intro
   â”œâ”€â”€ 2.5 gRPC vs REST vs GraphQL
   â”œâ”€â”€ 2.6 Use Cases in real-world applications
   â””â”€â”€ 2.7 Limitations of gRPC

3. ðŸ”¹ gRPC WITH GOLANG â€“ GETTING STARTED
   â”œâ”€â”€ 3.1 Setting up Go environment for gRPC
   â”œâ”€â”€ 3.2 Installing Protocol Buffers Compiler (protoc)
   â”œâ”€â”€ 3.3 Installing Go plugins for protobuf & gRPC
   â”œâ”€â”€ 3.4 Creating your first `.proto` file
   â”œâ”€â”€ 3.5 Generating Go code from `.proto`
   â””â”€â”€ 3.6 Directory structure for gRPC project

4. ðŸ”¹ BUILDING gRPC SERVICES IN GO
   â”œâ”€â”€ 4.1 Unary RPC â€“ Hello World
   â”‚     â”œâ”€â”€ Server Code
   â”‚     â””â”€â”€ Client Code
   â”œâ”€â”€ 4.2 Request and Response structure using ProtoBuf
   â”œâ”€â”€ 4.3 Implementing gRPC methods
   â”œâ”€â”€ 4.4 Error Handling in gRPC
   â””â”€â”€ 4.5 Logging & Debugging gRPC services

5. ðŸ”¹ ADVANCED RPC TYPES
   â”œâ”€â”€ 5.1 Server Streaming RPC
   â”œâ”€â”€ 5.2 Client Streaming RPC
   â”œâ”€â”€ 5.3 Bidirectional Streaming RPC
   â”œâ”€â”€ 5.4 Flow control and context
   â””â”€â”€ 5.5 Real-world examples of each type

6. ðŸ”¹ INTERCEPTORS & MIDDLEWARE
   â”œâ”€â”€ 6.1 Unary Interceptors
   â”œâ”€â”€ 6.2 Streaming Interceptors
   â”œâ”€â”€ 6.3 Authentication with Interceptors
   â””â”€â”€ 6.4 Logging, Tracing, Metrics (e.g., Prometheus)

7. ðŸ”¹ AUTHENTICATION & SECURITY
   â”œâ”€â”€ 7.1 TLS in gRPC (Mutual TLS setup)
   â”œâ”€â”€ 7.2 API Key/Auth Token in metadata
   â”œâ”€â”€ 7.3 OAuth2 / JWT Integration
   â””â”€â”€ 7.4 Securing public vs private APIs

8. ðŸ”¹ gRPC-GATEWAY & REST INTEGRATION
   â”œâ”€â”€ 8.1 What is gRPC-Gateway?
   â”œâ”€â”€ 8.2 Convert gRPC to REST using gRPC-Gateway
   â”œâ”€â”€ 8.3 Code generation & Setup
   â””â”€â”€ 8.4 Swagger/OpenAPI Integration

9. ðŸ”¹ STREAMING WITH CHANNELS IN GO
   â”œâ”€â”€ 9.1 Mapping gRPC streams to Go channels
   â”œâ”€â”€ 9.2 Handling large datasets with streams
   â””â”€â”€ 9.3 Backpressure and flow control

10. ðŸ”¹ DEPLOYMENT & CI/CD
    â”œâ”€â”€ 10.1 Dockerizing gRPC services
    â”œâ”€â”€ 10.2 Running with Docker Compose
    â”œâ”€â”€ 10.3 Kubernetes Deployment (gRPC readiness probe)
    â””â”€â”€ 10.4 Versioning & Breaking changes in proto

11. ðŸ”¹ TESTING gRPC IN GO
    â”œâ”€â”€ 11.1 Unit testing with mocks
    â”œâ”€â”€ 11.2 Integration testing with gRPC server
    â”œâ”€â”€ 11.3 Using `buf` for linting & breaking change detection
    â””â”€â”€ 11.4 Performance testing (e.g., ghz, grpcurl)

12. ðŸ”¹ gRPC BEST PRACTICES
    â”œâ”€â”€ 12.1 API Design Guidelines for `.proto`
    â”œâ”€â”€ 12.2 Naming conventions and directory structure
    â”œâ”€â”€ 12.3 Connection reuse & pooling
    â”œâ”€â”€ 12.4 Pagination, Filtering, Sorting via gRPC
    â””â”€â”€ 12.5 Handling versioning

13. ðŸ”¹ REAL-TIME PROJECT IDEAS
    â”œâ”€â”€ 13.1 Chat service with bidirectional streaming
    â”œâ”€â”€ 13.2 Notification service (push system)
    â”œâ”€â”€ 13.3 gRPC Auth Service with JWT
    â”œâ”€â”€ 13.4 File upload/download via gRPC
    â””â”€â”€ 13.5 Microservice architecture using gRPC
